<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
	
<bean id="poolDataSource"  abstract="true">
             <property name="maxActive" value="100"/>  <!-- 连接池的最大数据库连接数。设为0表示无限制。 -->
             <property name="initialSize" value="10"/>  <!-- 初始化连接数量 -->
             <property name="maxWait" value="-1"/>  <!-- 最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。 -->
             <property name="removeAbandonedTimeout" value="60"/>  <!-- 自我中断时间秒 -->
             <property name="minEvictableIdleTimeMillis" value="30000"/>  <!-- 连接的超时时间，默认为半小时。 -->
             <property name="minIdle" value="10"/>  <!-- 最小等待连接中的数量,设 0 为没有限制 -->
             <property name="timeBetweenEvictionRunsMillis" value="30000"/> <!--  #运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务。 -->
             <property name="jmxEnabled" value="true"/>  <!-- 注册池JMX。的默认值是true。 -->
             <property name="testWhileIdle" value="false"/>  <!-- 默认值是false,当连接池中的空闲连接是否有效 -->
             <property name="testOnBorrow" value="true"/><!--  默认值是true，当从连接池取连接时，验证这个连接是否有效 -->
             <property name="validationInterval" value="30000"/>  <!-- 检查连接死活的时间间隔（单位：毫妙） 0以下的话不检查。默认是0。 -->
             <property name="testOnReturn" value="false"/>  <!-- 默认值是flase,当从把该连接放回到连接池的时，验证这个连接是 -->
             <property name="validationQuery" value="select 1"/>  <!-- 一条sql语句，用来验证数据库连接是否正常。这条语句必须是一个查询模式，并至少返回一条数据。可以为任何可以验证数据库连接是否正常的sql -->
             <property name="logAbandoned" value="false"/>  <!-- 是否记录中断事件， 默认为 false -->
             <property name="removeAbandoned" value="true"/>  <!-- 是否自动回收超时连接
            这些拦截器将被插入到链中的一个java.sql.Connection对象的操作都是以拦截器。默认值是空的。
                  预定义的拦截器：
                  org.apache.tomcat.jdbc.pool.interceptor.ConnectionState - 跟踪自动提交，只读目录和事务隔离级别。
                  org.apache.tomcat.jdbc.pool.interceptor.tatementFinalizer - 跟踪打开的语句，并关闭连接时返回到池中。 -->
            <property name="jdbcInterceptors" value="org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer"/>  
       </bean> 
       
       
	<bean id="dataSource"
		class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close" parent="poolDataSource">
		<property name="driverClassName"
			value="com.mysql.jdbc.Driver">
		</property>
		<property name="url"
			value="jdbc:mysql://localhost:3306/db_student">
		</property>
		<property name="username" value="root"></property>
		<property name="password" value="123456"></property>
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<value>com/student/mapping/ClassCour.hbm.xml</value>
				<value>com/student/mapping/ClassFrom.hbm.xml</value>
				<value>com/student/mapping/CourseForm.hbm.xml</value>
				<value>com/student/mapping/PrizeForm.hbm.xml</value>
				<value>com/student/mapping/PrizeStud.hbm.xml</value>
				<value>com/student/mapping/ScoreForm.hbm.xml</value>
				<value>com/student/mapping/StudentForm.hbm.xml</value>
				<value>com/student/mapping/UserForm.hbm.xml</value>
				<value>com/student/mapping/UserGroup.hbm.xml</value>
				<value>com/student/mapping/UserMenu.hbm.xml</value>
				<value>com/student/mapping/UserRome.hbm.xml</value>
				<value>com/student/mapping/TeacherForm.hbm.xml</value>
				<value>com/student/mapping/UserRole.hbm.xml</value>
				<value>com/student/mapping/TestFrom.hbm.xml</value></list>
		</property>
	 </bean>
	
	<bean id="baseDao" class="com.student.dao.impl.BaseDaoImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="baseService" class="com.student.service.impl.BaseServiceImpl">
		<property name="baseDao" ref="baseDao" />
	</bean>
	
	<!-- 配置action Start -->
	<bean id="baseAction" class="com.student.action.BaseAction" scope="prototype">
		<property name="baseService" ref="baseService"></property>
	</bean>
	
	<bean id="loginAction" class="com.student.action.LoginAction" scope="prototype">
	  <property name="baseService" ref="baseService"></property>
	</bean>
	<!-- 配置action End -->
	<bean id="baseActionAndroid" class="com.student.action.android.BaseActionAndroid" scope="prototype">
		<property name="baseService" ref="baseService"></property>
	</bean>
	</beans>